{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MANUAL \u00b6 Library with classes and functions for working with the BagIt format DESCRIPTION \u00b6 BagIt is a set of hierarchical file layout conventions designed to support storage and transfer of arbitrary digital content. A \"bag\" consists of a directory containing the payload files and other accompanying metadata files known as \"tag\" files. The \"tags\" are metadata files intended to facilitate and document the storage and transfer of the bag. Processing a bag does not require any understanding of the payload file contents, and the payload files can be accessed without processing the BagIt metadata. This BagIt library is a software library intended to support the creation, manipulation, and validation of bags. Its current version is 0.97. It is version aware with the earliest supported version being 0.93. See: https://datatracker.ietf.org/doc/html/rfc8493 . This library was first developed by the LibraryOfCongress and forked by DANS-KNAW. INSTALLATION \u00b6 To use this library in a Maven-based project: Include in your pom.xml a declaration for the DANS maven repository: <repositories> <!-- possibly other repository declarations here ... --> <repository> <id>DANS</id> <releases> <enabled>true</enabled> </releases> <url>https://maven.dans.knaw.nl/releases/</url> </repository> </repositories> Include a dependency on this library. <dependency> <groupId>nl.knaw.dans</groupId> <artifactId>dans-bagit-lib</artifactId> <version>{version}</version> <!-- <=== FILL LIBRARY VERSION TO USE HERE --> </dependency>","title":"Manual"},{"location":"#manual","text":"Library with classes and functions for working with the BagIt format","title":"MANUAL"},{"location":"#description","text":"BagIt is a set of hierarchical file layout conventions designed to support storage and transfer of arbitrary digital content. A \"bag\" consists of a directory containing the payload files and other accompanying metadata files known as \"tag\" files. The \"tags\" are metadata files intended to facilitate and document the storage and transfer of the bag. Processing a bag does not require any understanding of the payload file contents, and the payload files can be accessed without processing the BagIt metadata. This BagIt library is a software library intended to support the creation, manipulation, and validation of bags. Its current version is 0.97. It is version aware with the earliest supported version being 0.93. See: https://datatracker.ietf.org/doc/html/rfc8493 . This library was first developed by the LibraryOfCongress and forked by DANS-KNAW.","title":"DESCRIPTION"},{"location":"#installation","text":"To use this library in a Maven-based project: Include in your pom.xml a declaration for the DANS maven repository: <repositories> <!-- possibly other repository declarations here ... --> <repository> <id>DANS</id> <releases> <enabled>true</enabled> </releases> <url>https://maven.dans.knaw.nl/releases/</url> </repository> </repositories> Include a dependency on this library. <dependency> <groupId>nl.knaw.dans</groupId> <artifactId>dans-bagit-lib</artifactId> <version>{version}</version> <!-- <=== FILL LIBRARY VERSION TO USE HERE --> </dependency>","title":"INSTALLATION"},{"location":"api/","text":"Maven project info \u00b6 Open the Maven project info in a new tab.","title":"Maven project info"},{"location":"api/#maven-project-info","text":"Open the Maven project info in a new tab.","title":"Maven project info"},{"location":"dev/","text":"Development \u00b6 This page contains information for developers about how to contribute to this project. Requirements \u00b6 Java 11 Maven Running tests and code quality checks \u00b6 Inside the bagit-java root directory, run mvn verify . General \u00b6 When extending the library follow the established patterns, to keep it easy to understand for any new user. JavaDoc \u00b6 Since this is a library, the JavaDocs should be relatively extensive, although there is no need to go overboard with this. At a minimum: The JavaDocs must be generated successfully. As of today this is a standard part of the build; the build will fail if doc generation fails. Every API endpoint method needs JavaDocs that documents the parameters and exceptions and has a deep link to the Dataverse docs for the end-point that is called. This must be a link to target \"_blank\". See existing code for examples. If an example program for the end-point method is available (which should be the case) also add a deep link to (the latest commit of) the example code. Run the documentation site locally to check how it renders.","title":"Development"},{"location":"dev/#development","text":"This page contains information for developers about how to contribute to this project.","title":"Development"},{"location":"dev/#requirements","text":"Java 11 Maven","title":"Requirements"},{"location":"dev/#running-tests-and-code-quality-checks","text":"Inside the bagit-java root directory, run mvn verify .","title":"Running tests and code quality checks"},{"location":"dev/#general","text":"When extending the library follow the established patterns, to keep it easy to understand for any new user.","title":"General"},{"location":"dev/#javadoc","text":"Since this is a library, the JavaDocs should be relatively extensive, although there is no need to go overboard with this. At a minimum: The JavaDocs must be generated successfully. As of today this is a standard part of the build; the build will fail if doc generation fails. Every API endpoint method needs JavaDocs that documents the parameters and exceptions and has a deep link to the Dataverse docs for the end-point that is called. This must be a link to target \"_blank\". See existing code for examples. If an example program for the end-point method is available (which should be the case) also add a deep link to (the latest commit of) the example code. Run the documentation site locally to check how it renders.","title":"JavaDoc"},{"location":"getting-started/","text":"Getting started \u00b6 Create a bag from a folder using version 0.97 \u00b6 Path folder=Paths.get(\"FolderYouWantToBag\"); StandardSupportedAlgorithms algorithm=StandardSupportedAlgorithms.MD5; boolean includeHiddenFiles=false; Bag bag=BagCreator.bagInPlace(folder,Arrays.asList(algorithm),includeHiddenFiles); Read an existing bag (version 0.93 and higher) \u00b6 Path rootDir=Paths.get(\"RootDirectoryOfExistingBag\"); BagReader reader=new BagReader(); Bag bag=reader.read(rootDir); Write a Bag object to disk \u00b6 Path outputDir=Paths.get(\"WhereYouWantToWriteTheBagTo\"); BagWriter.write(bag,outputDir); //where bag is a Bag object Verify Complete \u00b6 boolean ignoreHiddenFiles=true; BagVerifier verifier=new BagVerifier(); verifier.isComplete(bag,ignoreHiddenFiles); Verify Valid \u00b6 boolean ignoreHiddenFiles=true; BagVerifier verifier=new BagVerifier(); verifier.isValid(bag,ignoreHiddenFiles); Quickly verify by payload-oxum \u00b6 boolean ignoreHiddenFiles=true; if(BagVerifier.canQuickVerify(bag)){ BagVerifier.quicklyVerify(bag,ignoreHiddenFiles); } Add other checksum algorithms \u00b6 You only need to implement 2 interfaces: public class MyNewSupportedAlgorithm implements SupportedAlgorithm { @Override public String getMessageDigestName() { return \"SHA3-256\"; } @Override public String getBagitName() { return \"sha3256\"; } } public class MyNewNameMapping implements BagitAlgorithmNameToSupportedAlgorithmMapping { @Override public SupportedAlgorithm getMessageDigestName(String bagitAlgorithmName) { if (\"sha3256\".equals(bagitAlgorithmName)) { return new MyNewSupportedAlgorithm(); } return StandardSupportedAlgorithms.valueOf(bagitAlgorithmName.toUpperCase()); } } and then add the implemented BagitAlgorithmNameToSupportedAlgorithmMapping class to your BagReader or bagVerifier object before using their methods. Check for potential problems \u00b6 The BagIt format is extremely flexible and allows for some conditions which are technically allowed but should be avoided to minimize confusion and maximize portability. The BagLinter class allows you to easily check a bag for warnings: Path rootDir=Paths.get(\"RootDirectoryOfExistingBag\"); BagLinter linter=new BagLinter(); List<BagitWarning> warnings=linter.lintBag(rootDir,Collections.emptyList()); You can provide a list of specific warnings to ignore: Path rootDir=Paths.get(\"RootDirectoryOfExistingBag\"); BagLinter linter=new BagLinter(); List<BagitWarning> warnings=linter.lintBag(rootDir,Arrays.asList(BagitWarning.OLD_BAGIT_VERSION); Serialization \u00b6 The dans-bagit-lib does not support directly serializing a bag to an archive file. The examples show how to implement a custom serializer for the zip and tar formats. Fetching \u00b6 If you need fetch.txt functionality, the FetchHttpFileExample example demonstrates how you can implement this feature with your additional application and workflow requirements. Internationalization \u00b6 All logging and error messages have been put into a ResourceBundle . This allows for all the messages to be translated to multiple languages and automatically used during runtime.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#create-a-bag-from-a-folder-using-version-097","text":"Path folder=Paths.get(\"FolderYouWantToBag\"); StandardSupportedAlgorithms algorithm=StandardSupportedAlgorithms.MD5; boolean includeHiddenFiles=false; Bag bag=BagCreator.bagInPlace(folder,Arrays.asList(algorithm),includeHiddenFiles);","title":"Create a bag from a folder using version 0.97"},{"location":"getting-started/#read-an-existing-bag-version-093-and-higher","text":"Path rootDir=Paths.get(\"RootDirectoryOfExistingBag\"); BagReader reader=new BagReader(); Bag bag=reader.read(rootDir);","title":"Read an existing bag (version 0.93 and higher)"},{"location":"getting-started/#write-a-bag-object-to-disk","text":"Path outputDir=Paths.get(\"WhereYouWantToWriteTheBagTo\"); BagWriter.write(bag,outputDir); //where bag is a Bag object","title":"Write a Bag object to disk"},{"location":"getting-started/#verify-complete","text":"boolean ignoreHiddenFiles=true; BagVerifier verifier=new BagVerifier(); verifier.isComplete(bag,ignoreHiddenFiles);","title":"Verify Complete"},{"location":"getting-started/#verify-valid","text":"boolean ignoreHiddenFiles=true; BagVerifier verifier=new BagVerifier(); verifier.isValid(bag,ignoreHiddenFiles);","title":"Verify Valid"},{"location":"getting-started/#quickly-verify-by-payload-oxum","text":"boolean ignoreHiddenFiles=true; if(BagVerifier.canQuickVerify(bag)){ BagVerifier.quicklyVerify(bag,ignoreHiddenFiles); }","title":"Quickly verify by payload-oxum"},{"location":"getting-started/#add-other-checksum-algorithms","text":"You only need to implement 2 interfaces: public class MyNewSupportedAlgorithm implements SupportedAlgorithm { @Override public String getMessageDigestName() { return \"SHA3-256\"; } @Override public String getBagitName() { return \"sha3256\"; } } public class MyNewNameMapping implements BagitAlgorithmNameToSupportedAlgorithmMapping { @Override public SupportedAlgorithm getMessageDigestName(String bagitAlgorithmName) { if (\"sha3256\".equals(bagitAlgorithmName)) { return new MyNewSupportedAlgorithm(); } return StandardSupportedAlgorithms.valueOf(bagitAlgorithmName.toUpperCase()); } } and then add the implemented BagitAlgorithmNameToSupportedAlgorithmMapping class to your BagReader or bagVerifier object before using their methods.","title":"Add other checksum algorithms"},{"location":"getting-started/#check-for-potential-problems","text":"The BagIt format is extremely flexible and allows for some conditions which are technically allowed but should be avoided to minimize confusion and maximize portability. The BagLinter class allows you to easily check a bag for warnings: Path rootDir=Paths.get(\"RootDirectoryOfExistingBag\"); BagLinter linter=new BagLinter(); List<BagitWarning> warnings=linter.lintBag(rootDir,Collections.emptyList()); You can provide a list of specific warnings to ignore: Path rootDir=Paths.get(\"RootDirectoryOfExistingBag\"); BagLinter linter=new BagLinter(); List<BagitWarning> warnings=linter.lintBag(rootDir,Arrays.asList(BagitWarning.OLD_BAGIT_VERSION);","title":"Check for potential problems"},{"location":"getting-started/#serialization","text":"The dans-bagit-lib does not support directly serializing a bag to an archive file. The examples show how to implement a custom serializer for the zip and tar formats.","title":"Serialization"},{"location":"getting-started/#fetching","text":"If you need fetch.txt functionality, the FetchHttpFileExample example demonstrates how you can implement this feature with your additional application and workflow requirements.","title":"Fetching"},{"location":"getting-started/#internationalization","text":"All logging and error messages have been put into a ResourceBundle . This allows for all the messages to be translated to multiple languages and automatically used during runtime.","title":"Internationalization"},{"location":"javadoc/","text":"JavaDocs \u00b6 Open the JavaDoc in a new tab.","title":"JavaDoc"},{"location":"javadoc/#javadocs","text":"Open the JavaDoc in a new tab.","title":"JavaDocs"}]}